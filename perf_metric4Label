function [ mAP,PR,RR ] = perf_metric4Label( RetrLabels, QueryLabels, HammingDist )
% Calculating mAP for retrieval
% RetrLabels: m*l binary matrix ({0, 1}), m: retrieval set size, l: vocabulary size
% QueryLabels: n*l binary matrix ({0, 1}), n: query set size, l: vocabulary size
% HammingDist: m*nï¼Œdistance matrix between retrieval and query sets

[tsN, tagNum] = size(QueryLabels);
Nsa=size(RetrLabels,1);
multiLabel = tagNum > 1;                                            % multi-label or multi-class

mAP = 0.0;
goodQueryNum = 0;

% Instances sharing at least one label are considered to be relevant
if multiLabel
    rM = RetrLabels * QueryLabels';
end
PR=[];
RR=[];
for itN=10:50:Nsa
    pr=0.0;
    rr=0.0;
    for ti = 1 : tsN
        if multiLabel
            gnd = find(rM(:, ti) > 0);   %return the right index
        else
            gnd = find(RetrLabels == QueryLabels(ti));
        end
        gndNum = length(gnd);
        if gndNum == 0
            continue;
        end
        goodQueryNum = goodQueryNum + 1;
        
        [~, tmpI] = sort(HammingDist(:, ti), 1, 'ascend');
        rightInd = ismember(tmpI, gnd);
        
        % Find indecies of ground-truth relevant instances
        indecies = sort(find(rightInd));
        
        % Precision at the position of each relevant intance
        P = [1:1:gndNum]' ./ indecies;
        ind=indecies<(itN+1);
        pr=pr+1.0*sum(ind)/itN;
        rr=rr+1.0*sum(ind)/gndNum;
        if itN<15
            AP = mean(P);
            mAP = mAP + AP;
        end
    end
    if itN<15
        mAP = mAP / goodQueryNum;
    end
    PR=[PR,pr/tsN];
    RR=[RR,rr/tsN];
end


